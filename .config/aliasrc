#!/bin/sh


#######################################################################
#                               Author                                #
#######################################################################
#					    						 _       ___  _     _  ___   ___            #
# 		     /\             | |     / _ \(_)   | |/ _ \ / _ \           #
#         /  \   _ __   __| |_ __| | | |_  __| | (_) | (_) |          #
#        / /\ \ | '_ \ / _  | '__| | | | |/ _  |> _ < > _ <           #
#       / ____ \| | | | (_| | |  | |_| | | (_| | (_) | (_) |          #
#      /_/    \_\_| |_|\__,_|_|   \___/|_|\__,_|\___/ \___/           #
#                                                                     #
#######################################################################
# File: aliasrc
# Created: 03/27/20
# Last Modified: 2020-03-27

# Description: Aliasrc containing all my alias binds and functions.


#######################################################################
#                                Alias                                #
#######################################################################
alias ka="killall" \
  pw="passmenu" \
  pwi="pass insert $*" \
  r="ranger" \
  to="qbittorrent &" \
	mpv="mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)" \
	magit="nvim -c Magit" \
	p="sudo pacman" \
	SS="sudo systemctl" \
	f="vifm" \
	g="git" \
	trc="transmission-remote-cli" \
  tsm="transmission-remote" \
	e="$EDITOR" \
	v="$EDITOR" \
	vim="$EDITOR" \
	x="sxiv -ft *" \
  hosts='sudo nvim /etc/hosts' \
	sdn="sudo shutdown -h now" \
	gua="git remote | xargs -L1 git push --all" \
	ls="ls -hN --color=auto --group-directories-first" \
	la="ls -a --color=auto --group-directories-first" \
	ll="ls -la --group-directories-first" \
	grep="grep --color=auto" \
	diff="diff --color=auto" \
	ccat="highlight --out-format=ansi" \
	yt="youtube-dl --add-metadata -i -o '%(upload_date)s-%(title)s.%(ext)s'" \
	yta="yt -x -f bestaudio/best" \
	ytv="ytview -s" \
  pl="puppet-lint" \
	ref="shortcuts >/dev/null; source ~/.config/shortcutrc" \
	upc="sudo pacman -Syu; pkill -RTMIN+8 i3blocks" \
	lsp="pacman -Qett --color=always | less" \
	gallery="python /usr/lib/python3.7/site-packages/gallery_get.py" \
	reddit_gallery="python /usr/lib/python3.7/site-packages/reddit_get.py" \
	perm='stat -c "%a %n" *' \
	webserver="python -m http.server 8080" \
	starwars="telnet towel.blinkenlights.nl" \
	dotfiles="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME" \
	gs="git status" \
	ga="git add ." \
	gc="git commit -m" \
	gp="git push" \
	da="dotfiles add" \
	dc="dotfiles commit -m "$*"" \
	dp="dotfiles push" \
	ds="dotfiles status" \
	updots="dotfiles pull --rebase" \
	lsdots="dotfiles ls-tree --full-tree -r --name-only HEAD "$@" | treeify" \
	du="du -d1 -h" \
	backup="sudo timeshift --create" \
	pkglist="pacman -Qneq > ~/.pkglist.txt" \
	aurlist="pacman -Qmeq > ~/.aurlist.txt" \
	piplist="pip freeze > ~/.piplist.txt" \
	rld-i3="i3-msg reload" \
	rld-zsh="source ~/.config/zsh/.zshrc" \
	rld-short="shortcuts >/dev/null; source ~/.config/shortcutrc" \
	rld-bash="source ~/.bashrc" \
	tmux='TERM=screen-256color tmux'\
	t='TERM=screen-256color tmux'\
	tmuxl="tmux list-sessions" \
	tmuxa="tmux attach-session -t $1" \
  wifi='nmtui' \
  mscreen="xrandr --output DP-1-2 --mode 1920x1080 --output HDMI-2 --mode 1920x1080 --left-of DP-1-2 --output DP-1-3 --mode 1920x1080 --right-of DP-1-2" \
  awx="firefox -new-window http://127.0.0.1/#/login" \
  cockpit="firefox -new-window http://127.0.0.1:9090" \


#######################################################################
#                              Functions                              #
#######################################################################

# Find and logon to server in serverlist
fs(){
  host=$(/bin/cat ~/Documents/serverlist | fzf -m)
  xpanes --ssh -x $host
}

# Find IP for a FQDN, can do multiple lookups by marking hosts with tab
fip(){
  host=$(/bin/cat ~/Documents/serverlist | fzf -m)
    for servers in $(echo $host);
    do; host $servers; done;
}

# fbr - checkout git branch
fbr() {

  local branches branch

  branches=$(git branch) &&

  branch=$(echo "$branches" | fzf-tmux -h 15 +m) &&

  git checkout $(echo "$branch" | sed "s/.* //")

}

# Needed for fdiff
alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

# Show git commits with preview
fdiff() {
    glNoGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# A better way to deal with git stashes
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# Find and kill tmux sessions
fkt () {
    local sessions
    sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
    local i
    for i in "${(f@)sessions}"
    do
        [[ $i =~ '([^:]*):.*' ]] && {
            echo "Killing $match[1]"
            tmux kill-session -t "$match[1]"
        }
    done
}

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

ffind() {
nvim $(rg $1 | fzf)
}

function atest() {
cd ~/repo/ansible-repo
ansible-playbook -b -K -u install preconfig.yml --ask-pass
}

vncstart() {
x0vncserver -display :0 -passwordfile ~/.vnc/passwd
}

vncstop() {
  out=$(pgrep vnc)
  kill $out;
}

#fh repeat bash history commands
fh() {
eval $(history | fzf +s | sed 's/ *[0-9]* *//')
}
# bind '"\C-F":"fh\n"'	# fzf history ctrl + f hotkey

# copy working directory
cwa() { pwd | tr -d "\r\n" | xclip -selection clipboard; }

# Looks for articles in sci-hub and downloades them.
 shdl() { curl -O $(curl -s http://sci-hub.tw/"$@" | grep location.href | grep -o http.*pdf) ;}

# se is to search for scripts or config files, opens them up in default editor(nvim)
 se() { du -a ~/.local/bin/* ~/.config/* | awk '{print $2}' | fzf | xargs  -r $EDITOR ;}

 vf() { fzf | xargs -r -I % $EDITOR % ;}

 fp() { du -a ~/programmering/* | awk '{print $2}' | fzf | xargs -r $EDITOR ;}

# fsr opens fzf in surfraw bookmark folder and opens the bookmark up in default browser
 fsr() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e)" ;}

 # fmv takes filename after command and opens fzf to search for output location
  fmv() { mv -v "$1" "$(awk '{print $2}' ~/.config/bmdirs | fzf | sed "s|~|$HOME|")" ;}

 # fcp takes filename after command and opens fzf to search for output location
  fcp() { cp -v "$1" "$(awk '{print $2}' ~/.config/bmdirs && ~/.local/bin/tools | fzf | sed "s|~|$HOME|")" ;}

  # fd - cd to selected directory
  fd() {
    local dir
    dir=$(find ${1:-.} -path '*/\.*' -prune \
                    -o -type d -print 2> /dev/null | fzf +m) &&
    cd "$dir"
  }

fdh() {
  local dir
  dir=$(find ${1:-~/} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

ft() {
	local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
	{ tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
		| awk '!seen[$1]++' \
		| column -t -s'|' \
		| fzf -q '$' --reverse --prompt 'switch session: ' -1 \
		| cut -d':' -f1 \
    | sed 's/.//' \
		| xargs tmux attach-session -t $1
}

# Find file and open it in vim
ff() { fzf | xargs -r -I % $EDITOR % ;}

# FZF - find process and kill it
fkill() {
  ps aux | fzf | awk '{ print2 }' | xargs kill
}



  # Open output of a command in nvim
  vo() {
  [ -z "$1" ] && exit 1
  "$*" | nvim -
  }

# Search for songs on youtube, only play audio
 yl() { youtube-viewer -n $@ ; }

 rld-bashrc() { source ~/.bashrc ;} # Reload bashrc

 cd() { builtin cd "$@" && ls; }

 mkcd () {
   mkdir -p "$1"
   cd "$1"
 }

 # Runs yt dl on all files listed line by line in a file
 # Downloads them in a movie format.
 yt-file() { cat $1 | xargs -n1 youtube-dl --add-metadata -i -o '%(upload_date)s-%(title)s.%(ext)s'; }

 # Runs yt dl on all files listed line by line in a file
 # Downloads them in a audio format
 yta-file() { cat $1 | xargs -n1 youtube-dl -x -f bestaudio/best; }

 # Source all configs
 function rld-all(){
 source ~/.bashrc
 source ~/.config/zsh/.zshrc
 shortcuts >/dev/null; source ~/.config/shortcutrc
 i3-msg reload
 }

 function gcp() {
 commit_msg="$*"
     git add .
 if [ -z "$commit_msg" ]
   then
     git commit -a -m "Uploaded by script, no commit msg added"
 else
     git commit -a -m $commit_msg
 fi
     git push
 }

 function dcp() {
 commit_msg="$*"
     dotfiles add -u
 if [ -z "$commit_msg" ]
   then
     dotfiles commit -a -m "Uploaded by script, no commit msg added"
 else
     dotfiles commit -a -m $commit_msg
 fi
     dotfiles push
 }
 # Function to write out all installed packages from AUR,PIP and pacman
 function allpkgs(){
 	pacman -Qneq > ~/Documents/pkglist/pkglist.txt
 	pacman -Qmeq > ~/Documents/pkglist/aurlist.txt
 	pip freeze > ~/Documents/pkglist/piplist.txt; }
