#!/bin/bash

#######################################################################
#                               Author                                #
#######################################################################
#					    						 _       ___  _     _  ___   ___            #
# 		     /\             | |     / _ \(_)   | |/ _ \ / _ \           #
#         /  \   _ __   __| |_ __| | | |_  __| | (_) | (_) |          #
#        / /\ \ | '_ \ / _  | '__| | | | |/ _  |> _ < > _ <           #
#       / ____ \| | | | (_| | |  | |_| | | (_| | (_) | (_) |          #
#      /_/    \_\_| |_|\__,_|_|   \___/|_|\__,_|\___/ \___/           #
#                                                                     #
#######################################################################
# File: gastat
# Created:02/14/20
# Last Modified: 2020-03-26

# Description:
# Show status on all git repos in github/myrepos including dotfiles


dotfiles="/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME" \


#######################################################################
#                              Dotfiles                               #
#######################################################################

printf "##############"
printf "#  DOTFILES  #"
printf "##############\n"
$dotfiles status

# OneLiner i used before
# mygit=$HOME/github/myrepos
# find $mygit -name ".git" -type d -exec bash -c "echo '{}' && cd '{}'/.. && git status" \;


#######################################################################
#                              GIT REPOS                              #
#######################################################################

# Location of the git folder collection
mygitfolder=$HOME/github/myrepos

# Loop through all folders and place them in an array
git_folders=()
while IFS= read -r line; do
    git_folders+=( "$line" )
  done< <(ls ~/github/myrepos/)

# Loop through the array and run the commands needed to automaticly push a repo to github,
# git add, commit, push(IF commit executed sucsessfully meaning it was something to commit in that folder)
for folder in "${git_folders[@]}"
do
   printf "\n##############"
   printf "#     %s     #" "$folder"
   printf "##############\n"
   cd "$mygitfolder/$folder" || printf "%s is not a folder....skipping" "$folder";
   git status | grep -v "nothing to commit, working tree clean" | grep -v "On branch master" | grep -v "On branch production" | grep -v "nothing to commit"

 done

